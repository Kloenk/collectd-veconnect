initSidebarItems({"enum":[["ConfigValue","A parsed value from the Collectd config"],["LogLevel","The available levels that collectd exposes to log messages."],["PluginRegistration","How many instances of the plugin will be registered"],["Value","The value that a plugin reports can be any one of the following types"]],"fn":[["collectd_log","Sends message and log level to collectd. This bypasses any configuration setup via [`CollectdLoggerBuilder`], so collectd configuration soley determines if a level is logged and where it is delivered. Messages that are too long are truncated (1024 was the max length as of collectd-5.7)."]],"macro":[["collectd_log_raw","A simple wrapper around the collectd's plugin_log, which in turn wraps `vsnprintf`."],["collectd_plugin","Sets up all the ffi entry points that collectd expects when given a `PluginManager`."]],"mod":[["bindings",""],["de",""],["internal","Module used exclusively to setup the `collectd_plugin!` macro. No public functions from here should be used."],["ser",""]],"struct":[["CdTime","`CdTime` allows for ergonomic interop between collectd's `cdtime_t` and chrono's `Duration` and `DateTime`. The single field represents epoch nanoseconds."],["CollectdLoggerBuilder","Bridges the gap between collectd and rust logging. Terminology and filters methods found here are from env_logger."],["ConfigItem","Parsed key, values, children objects from the Collectd config."],["PluginCapabilities","Bitflags of capabilities that a plugin advertises to collectd."],["PluginManagerCapabilities","Bitflags of capabilities that a plugin manager advertises to collectd"],["ValueList","Contains values and metadata that collectd has collected from plugins"],["ValueListBuilder","Creates a value list to report values to collectd."],["ValueReport","Name and value of a reported metric"]],"trait":[["Plugin","An individual plugin that is capable of reporting values to collectd, receiving values from other plugins, or logging messages. A plugin must implement `Sync + Send` as collectd could be sending values to be written or logged concurrently. The Rust compiler will ensure that everything not thread safe is wrapped in a Mutex (or another compatible datastructure)"],["PluginManager","Defines the entry point for a collectd plugin. Based on collectd's configuration, a `PluginManager` will register any number of plugins (or return an error)"]]});